import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * 
 * This class encrypts and decrypts text files using one of 3 algorithms:
 * 		Random monoalphabet, Vigenere, or Playfair
 * 
 * 
 * @author Mikaela Valenciano
 * @version 1
 * 
 */
public class Crypt {

	
	/**
	 * 
	 * An integer representing the algorithm chosen.
	 * Set to:
	 * 1 for random monoalphabet
	 * 2 for Vigenere
	 * 3 for Playfair
	 * 
	 */
	public static final int algorithm = 1;
	public static final String lineSeparator = System.getProperty("line.separator");

	
	//public static final String inputFile = FileIO.fileSeparator + "test.txt";
	//public static final String outputFile = FileIO.fileSeparator + "testEncrypted.txt";

	
	private ArrayList<Character> makeKey(StringBuffer keyword)
	{	
		ArrayList<Character> keyLetters = new ArrayList<Character>();
		StringBuffer goodKey = new StringBuffer();
		
		for(int i = 0; i < keyword.length(); i++)
		{
			char letter = keyword.charAt(i);
			keyword.setCharAt(i, Character.toUpperCase(letter));
		}
		
		for(int i = 0; i < keyword.length(); i++) //removes repeated letters in original keyword
		{
			if(!keyLetters.contains(keyword.charAt(i)))
			{
				keyLetters.add(keyword.charAt(i));
				goodKey.append(keyword.charAt(i));
			}
		}
		//System.out.println("goodKey: " + goodKey);
		
		for(char letter = 'Z'; letter >= 'A'; letter--) 
		{
			if(!keyLetters.contains(letter))
			{
				keyLetters.add(letter);
			}
		}
		
		for(int i = 0; i < goodKey.length(); i++) //sets to lowercase
		{
			goodKey.setCharAt(i, Character.toLowerCase(goodKey.charAt(i)));
			keyLetters.add(goodKey.charAt(i));
		}
		//System.out.println("goodKey lowercase: " + goodKey);
		
		for(char letter = 'z'; letter >= 'a'; letter--) 
		{
			if(!keyLetters.contains(letter))
			{
				keyLetters.add(letter);
			}
		}
			
		return keyLetters;
	}
	
	private ArrayList<Character> makeAlph()
	{
		ArrayList<Character> alphabet = new ArrayList<Character>();
		
		for(char letter = 'A'; letter <= 'Z'; letter++)
		{
			alphabet.add(letter);
		}
		
		for(char letter = 'a'; letter <= 'z'; letter++)
		{
			alphabet.add(letter);
		}
		
		return alphabet;
	}
	
	
	/**
	 * Reads from the file specified, and writes out an encrypted version of the file. If the output file already
	 * exists, overwrite it.
	 * 
	 * @param inputFilename The path of the file to be encrypted.
	 * @param outputFilename The path of the encrypted file to be saved.
	 * @param keyword The keyword to be used in the encryption algorithm.
	 * 
	 */
	public void encrypt(String inputFilename, String outputFilename, String keyword) 
	{
		/* Mo' tips for speed:
		 * - don't use a scanner
		 * - don't use StringBuffer, but rather an ArrayList of characters
		 */
		
		// READ IN DATA FROM FILE
		
		FileReader reader;
		BufferedReader breader = null;
		
		Scanner in = null;
		
		FileWriter writer = null;
		BufferedWriter bwriter = null;
		
		
		
		try 
		{
			reader = new FileReader(inputFilename);
			breader = new BufferedReader(reader);
			
			in = new Scanner(breader); 
			
			writer = new FileWriter(outputFilename);
			bwriter = new BufferedWriter(writer);
			
			while(in.hasNextLine())
			{
				String input = in.nextLine(); //one line of the file
				StringBuffer bufferedInput = new StringBuffer(input); //mutable version of input
				StringBuffer bKey = new StringBuffer(keyword);
				
				ArrayList<Character> key = makeKey(bKey);
				//System.out.println("key: " + key);
				ArrayList<Character> alphabet = makeAlph();
				//System.out.println("alph: " + alphabet);
				
				//ArrayList<StringBuffer> encryptedMessage = new ArrayList<StringBuffer>();
				
				char letter;
				int coded = 0;
				
				StringBuffer codedLine = new StringBuffer();
				
				for(int i = 0; i < bufferedInput.length(); i++)
				{
					if(alphabet.contains(bufferedInput.charAt(i)))
					{
						letter = bufferedInput.charAt(i);
						coded = alphabet.indexOf(letter);
						letter = key.get(coded);
						codedLine.append(letter);
						//System.out.println("letter: " + letter + "; coded: " + coded);
					}
					else
					{
						codedLine.append(bufferedInput.charAt(i));
					}
					//System.out.println(codedLine);
				}
				/*
				encryptedMessage.add(codedLine);

				String encrypted = encryptedMessage.toString();
				//System.out.println(encrypted);
				*/
				String encrypted = codedLine.toString();
				// WRITE OUT TO A NEW FILE
				bwriter.write(encrypted + lineSeparator); // line is whatever comes out of encrypting the data
				
			}
		} 
		catch (IOException e) {
			e.printStackTrace();
		}	
		finally {
			if(in != null)
			in.close(); // close: closes what its attached to (close top most chain)
		
			try {
				if(bwriter != null)
					bwriter.close();
			}
			catch (IOException e) {
				e.printStackTrace();
			}	
		}
	}

	
	/**
	 * Reads from the (previously encrypted) file specified, and writes out a decrypted version of the file. 
	 * If the output file already exists, overwrite it.
	 * 
	 * @param inputFilename The path of the encrypted file.
	 * @param outputFilename The path of the decrypted file to be saved.
	 * @param keyword The keyword to be used in the decryption algorithm.
	 * 
	 */
	public void decrypt(String inputFilename, String outputFilename, String keyword) 
	{
		FileReader reader;
		BufferedReader breader = null;
		
		Scanner in = null;
		
		FileWriter writer = null;
		BufferedWriter bwriter = null;
		try 
		{
			reader = new FileReader(inputFilename);
			breader = new BufferedReader(reader);
			
			in = new Scanner(breader); 
			
			writer = new FileWriter(outputFilename);
			bwriter = new BufferedWriter(writer);
			
			while(in.hasNextLine())
			{
				String input = in.nextLine(); //one line of the file
				StringBuffer bufferedInput = new StringBuffer(input); //mutable version of input
				StringBuffer bKey = new StringBuffer(keyword);
				
				ArrayList<Character> key = makeKey(bKey);
				//System.out.println("key: " + key);
				ArrayList<Character> alphabet = makeAlph();
				//System.out.println("alph: " + alphabet);
				//ArrayList<StringBuffer> decryptedMessage = new ArrayList<StringBuffer>();
				
				char letter;
				int coded = 0;
				
				StringBuffer decodedLine = new StringBuffer();
				
				for(int i = 0; i < bufferedInput.length(); i++)
				{
					if(key.contains(bufferedInput.charAt(i)))
					{
						letter = bufferedInput.charAt(i);
						coded = key.indexOf(letter);
						letter = alphabet.get(coded);
						decodedLine.append(letter);
						//System.out.println("letter: " + letter + "; coded: " + coded);
					}
					else
					{
						decodedLine.append(bufferedInput.charAt(i));
					}
					//System.out.println(codedLine);
				}
				/*
				decryptedMessage.add(decodedLine);

				String decrypted = decryptedMessage.toString();
				//System.out.println(encrypted);
				*/
				String decrypted = decodedLine.toString();
				// WRITE OUT TO A NEW FILE
				bwriter.write(decrypted + lineSeparator); // line is whatever comes out of encrypting the data
				
			}
		} 
		catch (IOException e) {
			e.printStackTrace();
		}	
		finally {
			if(in != null)
			in.close(); // close: closes what its attached to (close top most chain)
		
			try {
				if(bwriter != null)
					bwriter.close();
			}
			catch (IOException e) {
				e.printStackTrace();
			}	
		}
	}

	
	
}
