package mjhv.rectangleTesters;

import java.awt.Color;
import java.awt.Dimension;

import javax.swing.JFrame;

import processing.awt.PSurfaceAWT;
import processing.core.PApplet;


public abstract class Shapes {
	
	protected double x, y;
	private boolean hasFill;
	private float fill, outline;
	private float strokeWeight;
	private double width, height, scaleFactor;
	
	public Shapes(double x, double y)
	{
		this.x = x;
		this.y =y;
		hasFill = true;
		fill = 0;
		outline = 0;
		strokeWeight = 1;
		width = 5;
		height = 5;
		scaleFactor = 1;
	}
	
	/**
	 * This method moves the shape to the x and y coordinates 
	 * that are passed in. These coordinates must be positive
	 * 
	 * @param x x-coordinate of new point
	 * @param y y-coordinate of new point
	 */
	public void move(int xCoord, int yCoord)
	{
		this.x = xCoord;
		this.y = yCoord;
	}
	
	/** Calculates and returns the perimeter of the shape
	 * 
	 * @return double value of the shape's perimeter  
	 */
	public double calcPerimeter()
	{
		return 0;
	}
	
	/**
	 * This method calculates and returns the shape's area
	 * 
	 * @return area of the shape 
	 */
	public double calcArea()
	{
		 return 0;
	}
	
	/**
	 * This method determines whether the point (x,y) is contained inside the shape-,
	 * returns true if point is on a shape edge or inside the shape
	 * and returns false if point is outside the shape 
	 * 
	 *  @return true if the point is inside the shape or false if the point is outside of it
	 */
	public boolean isPointInside(double x, double y)
	{
		if ((float)x >= this.x && (float)y >= this.y)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	/**  
	 * This method sets the fill, stroke weight, and outline of the Shape
	 * 
	 * @param marker PApplet to be used in order to draw the rectangle 
	 */
	public void draw(PApplet drawer)
	{
		drawer.strokeWeight(strokeWeight);
		drawer.fill(fill);
		drawer.stroke(outline);
		
		

	}
	
	
	//main method
	public static void main(String[] args)
	{
		DrawSurface drawing = new DrawSurface();
		
		PSurfaceAWT surf = (PSurfaceAWT) drawing.getSurface();
		PSurfaceAWT.SmoothCanvas canvas = (PSurfaceAWT.SmoothCanvas) surf.getNative();
		JFrame window = (JFrame)canvas.getFrame();
		
		window.setSize(600, 500);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setResizable(true);
		window.setVisible(true);
	
	}
	
}
