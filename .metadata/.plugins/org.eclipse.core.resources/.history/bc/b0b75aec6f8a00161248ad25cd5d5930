package mjhv.shapes;

import javax.swing.JFrame;

import mjhv.rectangleTesters.DrawSurface;
import processing.awt.PSurfaceAWT;
import processing.core.PApplet;

/**
 * 
 * @author Mikaela Valenciano
 * @version 9/28/2016
 * 
 * This class is the superclass for all Shape objects
 *
 */

public abstract class Shape {
	
	protected double x, y;
	//private boolean hasFill;
	private float fillR, fillG, fillB, outlineR, outlineG, outlineB;
	private float strokeWeight;
	private double width, height, scaleFactor;
	private double midX, midY; //
	
	
	public Shape(double x, double y)
	{
		this.x = x;
		this.y =y;
		//hasFill = true;
		//default RGB values (black) for the shape's fill color
		fillR = 0;
		fillG = 0;
		fillB = 0;
		//default RGB values (black) for the shape's outline color
		outlineR = 0;
		outlineG = 0;
		outlineB = 0;
		strokeWeight = 1;
		width = 5;
		height = 5;
		scaleFactor = 1;
	}
	
	
	
	/**
	 * This method sets the fill color of the shape with the RGB value 
	 * that is passed in
	 * 
	 * @param r red value
	 * @param g green value
	 * @param b blue value
	 */
	public void setFill(float r, float b, float g)
	{
		fillR = r;
		fillG = g;
		fillB = b;
	}
	
	/**
	 * This method sets the outline color of the shape with the RGB value 
	 * that is passed in
	 * 
	 * @param r red value
	 * @param g green value
	 * @param b blue value
	 */
	public void setOutline(float r, float g, float b)
	{
		outlineR = r;
		outlineG = g;
		outlineB = b;
	}
	
	/**
	 * This method sets the stroke weight, in pixels, of the shape with 
	 * the float value that is passed in
	 * 
	 * @param weight (or width) float value of the shape's lines in pixels
	 */
	public void setStroke(float weight)
	{
		strokeWeight = weight;
	}
	
	/**
	 * This method sets the shape's width to a new width, that is passed in  
	 * 
	 * @param w double value for what the new width of the shape will be set to 
	 */
	public void setWidth(double w)
	{
		width = w;
	}
	
	/**
	 * This method sets the shape's height to a new height, that is passed in  
	 * 
	 * @param h double value for what the new height of the shape will be set to 
	 */
	public void setHeight(double h)
	{
		height = h;
	}
	
	/**
	 * This method moves the shape to the x and y coordinates 
	 * that are passed in. These coordinates must be positive
	 * 
	 * @param x x-coordinate of new point
	 * @param y y-coordinate of new point
	 */
	public void move(int xCoord, int yCoord)
	{
		this.x = xCoord;
		this.y = yCoord;
	}
	
	/** Calculates and returns the perimeter of the shape
	 * 
	 * @return double value of the shape's perimeter  
	 */
	public double calcPerimeter()
	{
		return 0;
	}
	
	/**
	 * This method calculates and returns the shape's area
	 * 
	 * @return area of the shape 
	 */
	public double calcArea()
	{
		 return 0;
	}
	
	
	/**
	 * This method scales the Shape by a double value 
	 * 
	 * @param factor double value of how much to scale the shape by
	 */
	public void scale(double factor)
	{
		scaleFactor = factor;
	}
	
	/**
	 * This method determines whether the point (x,y) is contained inside the shape-,
	 * returns true if point is on a shape edge or inside the shape
	 * and returns false if point is outside the shape 
	 * 
	 *  @return true if the point is inside the shape or false if the point is outside of it
	 */
	public boolean isPointInside(double x, double y)
	{
		if ((float)x >= this.x && (float)y >= this.y)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	/**  
	 * This method sets the fill, stroke weight, and outline of the Shape
	 * 
	 * @param marker PApplet to be used in order to draw the rectangle 
	 */
	public void draw(PApplet drawer)
	{
		drawer.strokeWeight(strokeWeight);
		drawer.fill(fillR, fillG, fillB);
		drawer.stroke(outlineR, outlineG, outlineB);
	}
	
	
	//main method
	public static void main(String[] args)
	{
		DrawSurface drawing = new DrawSurface();
		
		PSurfaceAWT surf = (PSurfaceAWT) drawing.getSurface();
		PSurfaceAWT.SmoothCanvas canvas = (PSurfaceAWT.SmoothCanvas) surf.getNative();
		JFrame window = (JFrame)canvas.getFrame();
		
		window.setSize(600, 500);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setResizable(true);
		window.setVisible(true);
	
	}
	
}
